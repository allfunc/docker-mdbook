version: 2.1

commands:
  build-platform:
    description: build different platform
    parameters:
      build-platform:
        type: string
      docker-tag:
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Log time
          command: date
      - run:
          name: Log info
          command: export
      - run:
          name: Gen Docker file
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            DOCKER_FILES=$(support/DOCKER_FILES.sh)
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            ./support/build-multi.sh << parameters.docker-tag >>
            ls -la ${BUILD_FOLDER}
            for file in $DOCKER_FILES; do
              echo ""
              echo "###"
              echo "# --- Dockerfile ($file) Content ---"
              echo "###"
              echo ""
              cat ${BUILD_FOLDER}/$file
              echo ""
            done
      - run:
          name: build Docker image
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            VERSION=$(support/VERSION.sh)
            IMAGE_NAME=$(DOCKER_HUB=1 support/remoteImage.sh)
            BUILD_VERSION=<< parameters.docker-tag >>
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            BUILD_ARG=""
            if [ "x$VERSION" == "x$BUILD_VERSION" ]; then
                ALT_VERSION=$(support/ALT_VERSION.sh)
                if [ -n "${ALT_VERSION}" ]; then
                  BUILD_ARG="--build-arg ALT_VERSION=${ALT_VERSION}"
                fi
            fi
            echo "Build ARGS: ${BUILD_ARG}"
            docker pull $IMAGE_NAME:${BUILD_VERSION} || true
            docker buildx inspect --bootstrap
            echo "# ------ Start to Login ------ #"
            ./compile.sh login
            ./compile.sh rate
            echo "# ------ End to Login ------ #"
            if [ "xamd64" == "x<< parameters.build-platform >>" ]; then
              PLATFORM=linux/amd64
            else
              PLATFORM=linux/arm64/v8
            fi
            docker buildx build ${BUILD_ARG} -f ${BUILD_FOLDER}/Dockerfile \
              --cache-to=type=inline,mode=all \
              --cache-from $IMAGE_NAME:${BUILD_VERSION} \
              --push \
              --progress=plain \
              --platform ${PLATFORM} \
              -t $IMAGE_NAME:${BUILD_VERSION}-<< parameters.build-platform >> \
              ./${BUILD_FOLDER}
      - run:
          name: logout
          command: docker logout

executors:
  docker-publisher:
    docker:
      # https://github.com/CircleCI-Public/cimg-base
      - image: cimg/base:current

jobs:
  test:
    docker:
      - image: allfunc/terratest
    executor: docker-publisher
    resource_class: arm.large
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Test with terratest"
          command: |
            go test -timeout 30m -v ./tests | tee test_output.log
            terratest_log_parser -testlog test_output.log -outputdir test_output
      - store_test_results:
          path: test_output
  build-amd64:
    parameters:
      docker-tag:
        type: string
    executor: docker-publisher
    resource_class: large
    steps:
      - checkout
      - build-platform:
          docker-tag: << parameters.docker-tag >>
          build-platform: amd64
  build-arm64:
    parameters:
      docker-tag:
        type: string
    executor: docker-publisher
    resource_class: arm.large
    steps:
      - checkout
      - build-platform:
          docker-tag: << parameters.docker-tag >>
          build-platform: arm64
  merge-image:
    parameters:
      docker-tag:
        type: string
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Log time
          command: date
      - run:
          name: Log info
          command: export
      - run:
          name: merge image
          command: |
            echo "# ------ Start to Login ------ #"
            ./compile.sh login
            echo "# ------ End to Login ------ #"
            VERSION=$(support/VERSION.sh)
            IMAGE_NAME=$(DOCKER_HUB=1 support/remoteImage.sh)
            BUILD_VERSION=<< parameters.docker-tag >>
            FROM_IMAGE="${IMAGE_NAME}:${BUILD_VERSION}-amd64 ${IMAGE_NAME}:${BUILD_VERSION}-arm64"
            if [ "x$VERSION" == "x$BUILD_VERSION" ]; then
              docker buildx imagetools create \
                -t $IMAGE_NAME:latest ${FROM_IMAGE}
            fi
            docker buildx imagetools create \
              -t $IMAGE_NAME:${BUILD_VERSION} ${FROM_IMAGE}
            ./compile.sh updateDockerHubDesc
      - run:
          name: logout
          command: docker logout

base-matrix: &base-matrix
  matrix:
    parameters:
      docker-tag: ["0.4.40"]

workflows:
  run-job:
    jobs:
      - test
      - build-amd64:
          <<: *base-matrix
          requires:
            - test
      - build-arm64:
          <<: *base-matrix
          requires:
            - test
      - merge-image:
          <<: *base-matrix
          requires:
            - build-amd64
            - build-arm64
