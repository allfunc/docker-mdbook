version: 2.1

commands:
  install-docker-buildx:
    description: Install Docker Buildx
    parameters:
      docker-tag:
        type: string
      buildx-version:
        type: string
        default: v0.11.2
    steps:
      - run:
          name: Install Docker Buildx
          command: |
            mkdir -vp ~/.docker/cli-plugins/
            curl --silent -L "https://github.com/docker/buildx/releases/download/<< parameters.buildx-version >>/buildx-<< parameters.buildx-version >>.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
            chmod a+x ~/.docker/cli-plugins/docker-buildx
            docker buildx version
            docker run --rm --privileged aptman/qus -s -- -p aarch64
            docker context create buildcontext
            docker buildx create --name joyful-<< parameters.docker-tag >>- --append buildcontext --use

executors:
  docker-publisher:
    docker:
      # https://github.com/CircleCI-Public/cimg-base
      - image: cimg/base:current

jobs:
  test:
    docker:
      - image: allfunc/terratest
    executor: docker-publisher
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: "Test with terratest"
          command: |
            go test -timeout 30m -v ./tests | tee test_output.log
            terratest_log_parser -testlog test_output.log -outputdir test_output
      - store_test_results:
          path: test_output
  build-and-publish:
    parameters:
      docker-tag:
        type: string
    executor: docker-publisher
    resource_class: large
    parallelism: 4
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.24
          docker_layer_caching: true
      - run:
          name: Log time
          command: date
      - run:
          name: Log info
          command: export
      - run:
          name: Gen Docker file
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            DOCKER_FILES=$(support/DOCKER_FILES.sh)
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            ./support/build-multi.sh << parameters.docker-tag >>
            ls -la ${BUILD_FOLDER}
            for file in $DOCKER_FILES; do
              echo ""
              echo "###"
              echo "# --- Dockerfile ($file) Content ---"
              echo "###"
              echo ""
              cat ${BUILD_FOLDER}/$file
              echo ""
            done
      - install-docker-buildx:
          docker-tag: << parameters.docker-tag >>
      - run:
          name: build Docker image
          command: |
            VER_PREFIX=$(support/VER_PREFIX.sh)
            VERSION=$(support/VERSION.sh)
            ALT_VERSION=$(support/ALT_VERSION.sh)
            IMAGE_NAME=$(DOCKER_HUB=1 support/remoteImage.sh)
            BUILD_VERSION=<< parameters.docker-tag >>
            BUILD_FOLDER=${VER_PREFIX}-<< parameters.docker-tag >>
            BUILD_ARG=""
            LATEST_TAG=""
            if [ "x$VERSION" == "x$BUILD_VERSION" ]; then
                if [ -n "${ALT_VERSION}" ]; then
                  BUILD_ARG="--build-arg ALT_VERSION=${ALT_VERSION}"
                fi
                LATEST_TAG="-t $IMAGE_NAME:latest"
            fi
            echo "Build ARGS: ${BUILD_ARG}"
            docker pull $IMAGE_NAME:${BUILD_VERSION} || true
            docker buildx inspect --bootstrap
            echo "# ------ Start to Login ------ #"
            ./compile.sh login
            ./compile.sh rate
            echo "# ------ End to Login ------ #"
            docker buildx build ${BUILD_ARG} -f ${BUILD_FOLDER}/Dockerfile \
              --cache-to=type=inline,mode=all \
              --cache-from $IMAGE_NAME:${BUILD_VERSION} \
              --push \
              --progress=plain \
              --platform linux/arm64/v8 \
              -t $IMAGE_NAME:${BUILD_VERSION} ${LATEST_TAG} \
              ./${BUILD_FOLDER}
            ./compile.sh updateDockerHubDesc
      - run:
          name: logout
          command: docker logout

workflows:
  run-job:
    jobs:
      - test
      - build-and-publish:
          requires:
            - test
          matrix:
            parameters:
              docker-tag: ["0.4.35"]
